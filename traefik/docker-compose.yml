version: '3.7'

services:
  traefik:
    image: traefik:v2.2.1
    restart: always
    container_name: traefik
    ports:
      - 80:80 # <== http
      - 443:443 # <== https
      - '53:53/udp'
      - '53:53/tcp'
    command:
      #### These are the CLI commands that will configure Traefik and tell it how to work! ####
      ## API Settings - https://docs.traefik.io/operations/api/, endpoints - https://docs.traefik.io/operations/api/#endpoints ##
      - --api.dashboard=true # <== Enabling the dashboard to view services, middlewares, routers, etc...
      - --api.debug=true # <== Enabling additional endpoints for debugging and profiling
      ## Log Settings (options: ERROR, DEBUG, PANIC, FATAL, WARN, INFO) - https://docs.traefik.io/observability/logs/ ##
      - --log.level=DEBUG # <== Setting the level of the logs from traefik
      ## Provider Settings - https://docs.traefik.io/providers/docker/#provider-configuration ##
      - --providers.docker=true # <== Enabling docker as the provider for traefik
      - --providers.docker.exposedbydefault=false # <== Don't expose every container to traefik, only expose enabled ones
      - --providers.docker.network=web # <== Operate on the docker network named web
      ## Entrypoints Settings - https://docs.traefik.io/routing/entrypoints/#configuration ##
      - --entrypoints.web=true # <== Defining an entrypoint for port :80 named web
      - --entrypoints.web.address=:80
      - --entrypoints.web.http.redirections.entrypoint.to=web-secured
      - --entrypoints.web.http.redirections.entrypoint.scheme=https
      - --entrypoints.web-secured=true # <== Defining an entrypoint for port :80 named web
      - --entrypoints.web-secured.address=:443 # <== Defining an entrypoint for https on port :443 named web-secured
      ## DNS entrypoints
      - --entrypoints.dns-udp=true
      - --entrypoints.dns-udp.address=:53/udp
      - --entrypoints.dns-tcp=true
      - --entrypoints.dns-tcp.address=:53/tcp
      ## Certificate Settings (Let's Encrypt) -  https://docs.traefik.io/https/acme/#configuration-examples ##
      - --certificatesresolvers.mytlschallenge.acme.dnschallenge.provider=cloudflare
      - --certificatesresolvers.mytlschallenge.acme.email=letsencrypt@noizwaves.com # <== Setting email for certs
      - --certificatesresolvers.mytlschallenge.acme.storage=/letsencrypt/acme.json # <== Defining acme file to store cert information
      ## Accept any self-signed certificates presented by containers
      - --serverstransport.insecureskipverify=true
    env_file:
      - .env
    volumes:
      - ./letsencrypt:/letsencrypt # <== Volume for certs (TLS)
      - /var/run/docker.sock:/var/run/docker.sock # <== Volume for docker admin
    networks:
      - web # <== Placing traefik on the network named web, to access containers on this network
    labels:
      #### Labels define the behavior and rules of the traefik proxy for this container ####
      - traefik.enable=true # <== Enable traefik on itself to view dashboard and assign subdomain to view it
      - traefik.http.routers.api.rule=Host(`monitor.noizwaves.cloud`) # <== Setting the domain for the dashboard
      - traefik.http.routers.api.entrypoints=web-secured
      - traefik.http.routers.api.service=api@internal # <== Enabling the api to be a service to access
      - traefik.http.routers.api.tls=true
      - traefik.http.routers.api.tls.certresolver=mytlschallenge
      - traefik.http.routers.api.middlewares=authelia@docker

networks:
  web:
    external: true
