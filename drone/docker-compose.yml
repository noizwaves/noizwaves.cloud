version: '3.7'

services:
  server:
    image: drone/drone:2
    container_name: drone-server
    hostname: drone.${CLOUD_DOMAIN}
    restart: unless-stopped
    user: 1000:1000
    environment:
      - DRONE_GITEA_SERVER=https://gitea.${CLOUD_DOMAIN}
      - DRONE_SERVER_HOST=drone.${CLOUD_DOMAIN}
      - DRONE_SERVER_PROTO=https
    env_file:
      - .env
    networks:
      - web
      - backend
    volumes:
      - ../../cloud-data/drone/data:/data
    labels:
      - traefik.enable=true
      - traefik.http.services.drone.loadbalancer.server.port=80

      # HTTPS
      - traefik.http.routers.drone.rule=Host(`drone.${CLOUD_DOMAIN}`)
      - traefik.http.routers.drone.tls.certresolver=mytlschallenge
      - traefik.http.routers.drone.entrypoints=web-secured
      - traefik.http.routers.drone.tls=true
      - traefik.http.routers.drone.service=drone
  runner:
    image: drone/drone-runner-docker:1
    container_name: drone-runner
    hostname: drone-runner.${CLOUD_DOMAIN}
    restart: unless-stopped
    environment:
      - DRONE_RPC_PROTO=http
      - DRONE_RPC_HOST=server
      - DRONE_RPC_SECRET=067c3c96bf438e837f096a9f6f111ab2
      - DRONE_RUNNER_CAPACITY=1
      - DRONE_RUNNER_NAME=runner
      - DRONE_UI_USERNAME=admin
    env_file:
      - .env
    depends_on:
      - server
    networks:
      - web
      - backend
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    labels:
      - traefik.enable=true
      - traefik.http.services.drone-runner.loadbalancer.server.port=3000

      # HTTPS
      - traefik.http.routers.drone-runner.rule=Host(`drone-runner.${CLOUD_DOMAIN}`)
      - traefik.http.routers.drone-runner.tls.certresolver=mytlschallenge
      - traefik.http.routers.drone-runner.entrypoints=web-secured
      - traefik.http.routers.drone-runner.tls=true
      - traefik.http.routers.drone-runner.service=drone-runner

networks:
  web:
    external: true
  backend:
    external: false
