services:
  app:
    image: docker.io/ghostfolio/ghostfolio:2.198.0
    container_name: ghostfolio
    restart: unless-stopped
    init: true
    cap_drop:
      - ALL
    security_opt:
      - no-new-privileges:true
    env_file:
      - .env
    networks:
      - backend
      - web
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ['CMD-SHELL', 'curl -f http://localhost:3333/api/v1/health']
      interval: 10s
      timeout: 5s
      retries: 5
    labels:
      - traefik.enable=true

      ## Service settings
      - traefik.http.services.ghostfolio.loadbalancer.server.port=3333
      - traefik.http.services.ghostfolio.loadbalancer.passhostheader=true

      ## HTTPS
      - traefik.http.routers.ghostfolio.rule=Host(`ghostfolio.${CLOUD_DOMAIN}`)
      - traefik.http.routers.ghostfolio.entrypoints=web-secured
      - traefik.http.routers.ghostfolio.service=ghostfolio
      - traefik.http.routers.ghostfolio.tls=true
      - traefik.http.routers.ghostfolio.tls.certresolver=mytlschallenge

      # Automatically updated
      - com.centurylinklabs.watchtower.enable=true

  postgres:
    image: postgres:16-alpine
    container_name: ghostfolio_postgres
    user: "1000:1000"
    restart: unless-stopped
    cap_drop:
      - ALL
    cap_add:
      - CHOWN
      - DAC_READ_SEARCH
      - FOWNER
      - SETGID
      - SETUID
    security_opt:
      - no-new-privileges:true
    env_file:
      - .env
    networks:
      - backend
    healthcheck:
      test:
        ['CMD-SHELL', 'pg_isready -d "$${POSTGRES_DB}" -U $${POSTGRES_USER}']
      interval: 10s
      timeout: 5s
      retries: 5
    volumes:
      - ../../cloud-data/ghostfolio/postgres:/var/lib/postgresql/data

  redis:
    image: redis:alpine
    container_name: ghostfolio_redis
    restart: unless-stopped
    user: '999:1000'
    cap_drop:
      - ALL
    security_opt:
      - no-new-privileges:true
    env_file:
      - .env
    networks:
      - backend
    command:
      - /bin/sh
      - -c
      - redis-server --requirepass "$${REDIS_PASSWORD:?REDIS_PASSWORD variable is not set}"
    healthcheck:
      test:
        ['CMD-SHELL', 'redis-cli --pass "$${REDIS_PASSWORD}" ping | grep PONG']
      interval: 10s
      timeout: 5s
      retries: 5

networks:
  backend:
    external: false
    internal: true

  web:
    external: true
